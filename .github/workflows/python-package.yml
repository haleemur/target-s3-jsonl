# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches:
    tags:
  # pull_request:
  #   branches: [ main ]
  release:
    types: [ published ] #, created, edited

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        project: ['target-s3-jsonl']
        os: [ubuntu-latest] #, macos-latest, windows-latest
        # python-version: [3.8, 3.9, '3.10']
        python-version: [3.9]
        # include:
        # - os: ubuntu-latest
        #   path: ~/.cache/pip
        # - os: macos-latest
        #   path: ~/Library/Caches/pip
        # - os: windows-latest
        #   path: ~\AppData\Local\pip\Cache
        exclude:
          - os: macos-latest
            python-version: 3.9
          - os: macos-latest
            python-version: 3.10
          - os: windows-latest
            python-version: 3.9
          - os: windows-latest
            python-version: 3.10

    steps:
    - uses: actions/checkout@v3
    # - name: Checkout
    #   uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        # cache-dependency-path: '**/setup.cfg'

    # - name: Cache pip Linux
    #   uses: actions/cache@v3
    #   if: startsWith(runner.os, 'Linux')
    #   with:
    #     path: ${{ matrix.path }}
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    #       ${{ runner.os }}-
    # - name: Cache pip macOS
    #   uses: actions/cache@v3
    #   if: startsWith(runner.os, 'macOS')
    #   with:
    #     path: ${{ matrix.path }}
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    #       ${{ runner.os }}-
    # - name: Cache pip Windows
    #   uses: actions/cache@v3
    #   if: startsWith(runner.os, 'Windows')
    #   with:
    #     path: ${{ matrix.path }}
    #     key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pip-
    #       ${{ runner.os }}-

    # - name: Run with setup-python 3.9
    #   uses: ./
    #   with:
    #     python-version: 3.9

    - name: Install dependencies
      run: |
        # python -m venv venv || virtualenv venv
        # . venv/bin/activate
        pip install --upgrade pip # setuptools
        pip install .[test,lint,dist]

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: pip cache
      uses: actions/cache@v3
      with:
        # path: ${{ matrix.path }}
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

  lint:
    if: ${{ always() }}
    needs: build

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Lint with flake8
      run: |
        # . venv/bin/activate
        # stop the build if there are Python syntax errors or undefined names
        # exit-zero treats all errors as warnings. The GitHub editor is 255 chars wide
        flake8 --show-source --statistics --count

  test:
    needs: build
    name: Test pip (Python ${{ matrix.python-version}}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        project: ['target-s3-jsonl']
        os: [ubuntu-latest]
        # python-version: [3.8, 3.9, '3.10']
        python-version: [3.9]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        - os: macos-latest
          path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache

    steps:
    - uses: actions/checkout@v3
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ${{ matrix.path }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Test
      run: |
        # . venv/bin/activate
        pytest
    - name: Upload coverage test results to Codecov
      uses: codecov/codecov-action@v2
      if: |
        ${{ matrix.python-version }} == '3.9' \
        && ${{ matrix.os-version }} == 'ubuntu-latest'
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        file: coverage.xml # optional
        flags: unittests # optional
        name: codecov-${{ matrix.project }} # optional
        env_vars: OS,PYTHON
        fail_ci_if_error: true # optional (default = false)
        verbose: false # optional (default = false)

  package:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Build distribution package
      run: |
        # . venv/bin/activate
        python setup.py sdist bdist_wheel
        ls -l dist

  publish-test:
    needs: [package, lint]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Publish distribution package to TestPyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        verify_metadata: true
        skip_existing: true
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

  publish:
    needs: publish-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: pip cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.cfg') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: Publish distribution package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@master
      with:
        verify_metadata: true
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
